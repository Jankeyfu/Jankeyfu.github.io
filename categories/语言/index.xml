<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>语言 on 温故知新以为师</title>
    <link>http://jankeyfu.github.io/categories/%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in 语言 on 温故知新以为师</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 15 Mar 2020 12:00:05 +0800</lastBuildDate>
    
	<atom:link href="http://jankeyfu.github.io/categories/%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Context</title>
      <link>http://jankeyfu.github.io/posts/language/go_context/</link>
      <pubDate>Sun, 15 Mar 2020 12:00:05 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/language/go_context/</guid>
      <description>&lt;p&gt;Context 也称为上下文，主要用于并发中对多个 goroutine 的控制，也可作为全局数据进行传递的载体，按照golang 的编程实践，一般用作函数的第一个参数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Channel</title>
      <link>http://jankeyfu.github.io/posts/language/go_channel/</link>
      <pubDate>Sat, 14 Mar 2020 15:43:06 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/language/go_channel/</guid>
      <description>&lt;p&gt;channel 是Go语言中很重要的一种数据结构，他主要用于多个协程之间进行通信。其设计是同步的，在使用的时候并不需要加锁，由于channel的存在，大大降低了go 并发编写的难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang Reflect基础篇</title>
      <link>http://jankeyfu.github.io/posts/language/go_reflect_base/</link>
      <pubDate>Sat, 31 Aug 2019 14:30:33 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/language/go_reflect_base/</guid>
      <description>&lt;p&gt;套用维基百科的解释来说，反射就是指计算机程序在运行时（Run time）可以访问、检测和修改它本身状态或行为的一种能力。用比喻来说，反射就是程序在运行的时候能够“观察”并且修改自己的行为。Go语言和很多语言一样，支持反射操作，接下来就一起学习下，反射在Go语言中是怎么使用的。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>