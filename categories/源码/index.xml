<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>源码 on 温故知新以为师</title>
    <link>http://jankeyfu.github.io/categories/%E6%BA%90%E7%A0%81/</link>
    <description>Recent content in 源码 on 温故知新以为师</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 29 Dec 2019 16:04:06 +0800</lastBuildDate>
    
	<atom:link href="http://jankeyfu.github.io/categories/%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sync.Pool 对象重用利器</title>
      <link>http://jankeyfu.github.io/posts/opensource/syncpool/</link>
      <pubDate>Sun, 29 Dec 2019 16:04:06 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/opensource/syncpool/</guid>
      <description>&lt;p&gt;最近在看 zap 相关的源码，里面用到了很多的 sync.Pool 来优化内存使用，于是花了点时间研究了下。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sync.Pool&lt;/code&gt; 是一组可以单独保存和检索的&lt;strong&gt;临时对象&lt;/strong&gt;，之所以称其保存的是临时对象是因为在下一次 GC 的时候，池中对象会被清理，且被清理时不会得到任何通知，因此池中不适合存放数据库连接等持久对象。&lt;code&gt;sync.Pool&lt;/code&gt;的主要用途是存储已分配内存但却不再使用的对象，以供后续重用此对象，减少内存分配产生的碎片垃圾回收，提升性能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Logrus</title>
      <link>http://jankeyfu.github.io/posts/opensource/logrus/</link>
      <pubDate>Fri, 23 Aug 2019 18:03:32 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/opensource/logrus/</guid>
      <description>&lt;p&gt;logrus是Go语言编写的结构化日志工具，拥有丰富的日志API，支持自定义格式输出同时也支持hook操作，是目前比较流行的Go语言日志记录工具。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>