<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>温故知新以为师</title>
    <link>http://jankeyfu.github.io/</link>
    <description>Recent content on 温故知新以为师</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 15 Mar 2020 14:46:09 +0800</lastBuildDate>
    
	<atom:link href="http://jankeyfu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux 压缩命令</title>
      <link>http://jankeyfu.github.io/posts/linux/cmd_compress/</link>
      <pubDate>Sun, 15 Mar 2020 14:46:09 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/linux/cmd_compress/</guid>
      <description>&lt;p&gt;在 linux 上下载安装软件的时候，通常下载下来的文件都是经过压缩过的压缩包文件，这样做的目的是通过压缩，能够减少数据对网络带宽的占用，以便我们能够以更快的速度下载完成软件安装包。因此学习 linux 文件压缩解压缩命令是必不可少的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Context</title>
      <link>http://jankeyfu.github.io/posts/golang/context/</link>
      <pubDate>Sun, 15 Mar 2020 12:00:05 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/golang/context/</guid>
      <description>&lt;p&gt;Context 也称为上下文，主要用于并发中对多个 goroutine 的控制，也可作为全局数据进行传递的载体，按照golang 的编程实践，一般用作函数的第一个参数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Channel</title>
      <link>http://jankeyfu.github.io/posts/golang/channel/</link>
      <pubDate>Sat, 14 Mar 2020 15:43:06 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/golang/channel/</guid>
      <description>&lt;p&gt;channel 是Go语言中很重要的一种数据结构，他主要用于多个协程之间进行通信。其设计是同步的，在使用的时候并不需要加锁，由于channel的存在，大大降低了go 并发编写的难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>布隆过滤器（Bloom Filter）</title>
      <link>http://jankeyfu.github.io/posts/algorithm/bloom_filter/</link>
      <pubDate>Sun, 05 Jan 2020 17:25:40 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/algorithm/bloom_filter/</guid>
      <description>&lt;p&gt;如何判断一个数是否在某个集合中，我们最简单的方式是遍历集合判断是否存在这样一个元素，更高级一点的方式是使用哈希表，可以以 &lt;code&gt;O(1)&lt;/code&gt; 的时间复杂度判断一个元素是否在集合中，但是当数据量达到亿级别的时候，再采用这种方式就会出现问题，那IPV4来说，现有ip数量为 256^4个（假设每一个不同的都算），以 map 存储的话，假如key是字符串，占用15字节，val是布尔型1个字节，一个k-v 占16个字节，至少也得占用2^36个字节，折算下来就是 2^36/1024/1024/1024 = 2^6 = 64G，这么大内存肯定是放不下的，因此需要一种特殊的算法来进行处理，接下来所要介绍的算法就是解决大数据下，元素是否存在于集合中这么一个问题的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sync.Pool 对象重用利器</title>
      <link>http://jankeyfu.github.io/posts/golang/syncpool/</link>
      <pubDate>Sun, 29 Dec 2019 16:04:06 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/golang/syncpool/</guid>
      <description>&lt;p&gt;最近在看 zap 相关的源码，里面用到了很多的 sync.Pool 来优化内存使用，于是花了点时间研究了下。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sync.Pool&lt;/code&gt; 是一组可以单独保存和检索的&lt;strong&gt;临时对象&lt;/strong&gt;，之所以称其保存的是临时对象是因为在下一次 GC 的时候，池中对象会被清理，且被清理时不会得到任何通知，因此池中不适合存放数据库连接等持久对象。&lt;code&gt;sync.Pool&lt;/code&gt;的主要用途是存储已分配内存但却不再使用的对象，以供后续重用此对象，减少内存分配产生的碎片垃圾回收，提升性能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prometheus &#43; Grafana 配置系统监控</title>
      <link>http://jankeyfu.github.io/posts/design/grafana/</link>
      <pubDate>Sun, 27 Oct 2019 14:43:13 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/design/grafana/</guid>
      <description>&lt;p&gt;最近上线系统出了一些问题，但是上完线之后都没有发现，直到外围报出问题去定位才解决。因此想着是不是应该给系统加上监控和报警，以便能够在系统出现问题的第一时间去解决。于是去研究了一波&lt;code&gt;prometheus + grafana&lt;/code&gt;相关的资料。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 进阶命令</title>
      <link>http://jankeyfu.github.io/posts/linux/cmd_advanced/</link>
      <pubDate>Thu, 26 Sep 2019 17:51:19 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/linux/cmd_advanced/</guid>
      <description> 文件查找命令 find find path -options -name file_name	#精确匹配 -iname file_name #不区分大小写精确匹配 </description>
    </item>
    
    <item>
      <title>Linux 基础命令</title>
      <link>http://jankeyfu.github.io/posts/linux/cmd_base/</link>
      <pubDate>Thu, 26 Sep 2019 17:30:41 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/linux/cmd_base/</guid>
      <description>&lt;p&gt;对于刚接触到开发的同学，势必是需要了解一些基本的Linux命令的，这些都是日常开发过程中使用频繁的命令，多用即可熟练掌握。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排序算法集合</title>
      <link>http://jankeyfu.github.io/posts/algorithm/sort/</link>
      <pubDate>Sat, 14 Sep 2019 12:29:17 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/algorithm/sort/</guid>
      <description>&lt;p&gt;排序算法可以说是算法中最基础的，但是一直以来都没有系统地去整理过，而且其中有些细节还是值得好好推敲的，因此把遇到过的排序算法进行整理了一下。目前整理地还不够全面，后续会继续慢慢完善。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>刻意练习</title>
      <link>http://jankeyfu.github.io/posts/book_reading/keyilianxi/</link>
      <pubDate>Sun, 08 Sep 2019 14:24:10 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/book_reading/keyilianxi/</guid>
      <description>&lt;p&gt;最近公司部门总监弄了个书架，就去看了看，然后看中了这本《刻意练习》就借来看了看，感觉还不错就写个文章总结下里面的思想，希望对自己日后的学习工作有帮助。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LRU 缓存设计</title>
      <link>http://jankeyfu.github.io/posts/design/lru/</link>
      <pubDate>Thu, 05 Sep 2019 10:23:56 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/design/lru/</guid>
      <description>&lt;p&gt;LRU ( Least Recently Used ) ：见名知意，即最近最少使用，这是一种常见的缓存策略，当缓存数据超过缓存容量时，将最近最少使用的数据项从缓存中去除以便能够存储新的数据。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang Reflect基础篇</title>
      <link>http://jankeyfu.github.io/posts/golang/reflect_base/</link>
      <pubDate>Sat, 31 Aug 2019 14:30:33 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/golang/reflect_base/</guid>
      <description>&lt;p&gt;套用维基百科的解释来说，反射就是指计算机程序在运行时（Run time）可以访问、检测和修改它本身状态或行为的一种能力。用比喻来说，反射就是程序在运行的时候能够“观察”并且修改自己的行为。Go语言和很多语言一样，支持反射操作，接下来就一起学习下，反射在Go语言中是怎么使用的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL EXPLAIN</title>
      <link>http://jankeyfu.github.io/posts/db/mysql_explain/</link>
      <pubDate>Mon, 26 Aug 2019 10:07:21 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/db/mysql_explain/</guid>
      <description>&lt;p&gt;在日常开发工作中，你是否经常遇到自己写的sql执行时间过长影响系统性能的问题却无从下手？这时候你就需要一个工具，这就是&lt;code&gt;EXPLAIN&lt;/code&gt;命令，它将全面分析我们所编写的sql语句，包括表的查询顺序，索引的使用情况以及预估的涉及数据量大小等等，接下来我们就一起来探索一下，如何分析我们写的sql语句的性能，以便写出更优，执行速度更快的sql吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Logrus</title>
      <link>http://jankeyfu.github.io/posts/golang/logrus/</link>
      <pubDate>Fri, 23 Aug 2019 18:03:32 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/golang/logrus/</guid>
      <description>&lt;p&gt;logrus是Go语言编写的结构化日志工具，拥有丰富的日志API，支持自定义格式输出同时也支持hook操作，是目前比较流行的Go语言日志记录工具。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 面试要点</title>
      <link>http://jankeyfu.github.io/posts/golang/interview/</link>
      <pubDate>Sun, 18 Aug 2019 22:17:58 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/golang/interview/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文是长期维护的Go相关的笔试面试题合集&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Redis 数据结构 —— 字符串</title>
      <link>http://jankeyfu.github.io/posts/db/redis_data_struct/</link>
      <pubDate>Sun, 11 Aug 2019 15:58:49 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/db/redis_data_struct/</guid>
      <description>&lt;p&gt;redis 是一个基于C语言设计的开源的高性能的内存型数据结构存储系统，它可以用作数据库、缓存和消息中间件等。它支持以下五种数据格式： 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）和有序集合（sorted sets）。今天就从源码的角度分析一下这五种数据格式是怎么实现的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>当你在浏览器中输入网址后都发生了什么？</title>
      <link>http://jankeyfu.github.io/posts/net/what_happens_when_enter_url_into_browser/</link>
      <pubDate>Sat, 20 Jul 2019 15:06:54 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/net/what_happens_when_enter_url_into_browser/</guid>
      <description>&lt;p&gt;“在浏览器中输入网址后，背后都发生了什么事情“这个问题，想必很多人都很好奇。从不同的角度有不同的分析，有硬件相关的知识，也有软件相关的知识，本文只着重介绍软件相关的知识点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>新征途</title>
      <link>http://jankeyfu.github.io/posts/thinking/start/</link>
      <pubDate>Sun, 14 Jul 2019 15:14:34 +0800</pubDate>
      
      <guid>http://jankeyfu.github.io/posts/thinking/start/</guid>
      <description>&lt;p&gt;不知不觉毕业已过一年，却发现自己还是老样子，总觉得自己的进步不那么满意却一直在逃避，不愿正视，所以也是时候好好地反思过去，开启新征途了。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>